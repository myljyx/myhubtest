/* Generated By:JavaCC: Do not edit this line. SimpleExpressionInterpreter.java */
/*******************************************************************************
 * Copyright (c) 2008-2009 zhang yuexiang.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.xfeep.asura.core.el;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.StringReader;
import java.util.HashMap;
import java.util.Map;
import org.xfeep.asura.core.reflect.TypeInfoPool;


@SuppressWarnings("all")
public class SimpleExpressionInterpreter implements SimpleExpressionInterpreterConstants {

  private Object target;
  TypeInfoPool typePool = TypeInfoPool.getDefault();

/*  
  public SimpleExpressionInterpreter(){
  	typePool =  TypeInfoPool.getDefault();
  }
  
  public SimpleExpressionInterpreter(TypeInfoPool typePool){
  	this.typePool = typePool;
  }
*/

  public void setTarget(Object target){
        this.target = target;
  }

  public Object getTarget(){
        return target;
  }

   public static void main(String args[]) throws ParseException {

    Map<String, Object> target = new HashMap<String, Object>();
    target.put("name", "zhangyx");
    Map<String, Object> config = new HashMap<String, Object>();
    config.put("_id_", "http");
    target.put("c", config);
    BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
    String line = null;

    try {
                while (  (line = reader.readLine()) != null ) {
                        SimpleExpressionInterpreter interpreter = new SimpleExpressionInterpreter(new StringReader(line));
                        interpreter.setTarget(target);
                  try {
                    System.out.println(interpreter.eval());
                  } catch (Throwable e) {
                   e.printStackTrace();
                    interpreter.ReInit(System.in);
                  }
                }
        } catch (IOException e) {
                e.printStackTrace();
        }
  }

  final public boolean eval() throws ParseException {
                  boolean rt;
    rt = boolean_filter();
    jj_consume_token(0);
                                      {if (true) return rt;}
    throw new Error("Missing return statement in function");
  }

  final public boolean boolean_filter() throws ParseException {
                             boolean rt;
    rt = boolean_term();
                              if (rt) {if (true) return rt;}
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      jj_consume_token(OR);
      rt = boolean_term();
                                      if (rt) {if (true) return rt;}
    }
                                                                {if (true) return false;}
    throw new Error("Missing return statement in function");
  }

  final public boolean boolean_term() throws ParseException {
                           boolean rt;
    rt = boolean_factor();
                                if (!rt) {if (true) return false;}
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      jj_consume_token(AND);
      rt = boolean_factor();
                                                                                        if (!rt) {if (true) return false;}
    }
                                                                                                                    {if (true) return true;}
    throw new Error("Missing return statement in function");
  }

  final public boolean boolean_factor() throws ParseException {
                             boolean rt; boolean isNot = false;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
      jj_consume_token(NOT);
                 isNot=true;
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
    rt = boolean_primary();
                                                         {if (true) return isNot ? !rt : rt;}
    throw new Error("Missing return statement in function");
  }

  final public boolean boolean_primary() throws ParseException {
                           boolean isEq = false; boolean rt; Object val1; Object val2;
    val1 = value_exp();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQ:
    case NEQ:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
        jj_consume_token(EQ);
                   isEq=true;
        break;
      case NEQ:
        jj_consume_token(NEQ);
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      val2 = value_exp();
                 rt = SimpleComparator.compareEquals(val1, val2);
                 {if (true) return isEq ? rt : !rt;}
      break;
    default:
      jj_la1[4] = jj_gen;
      ;
    }
                {if (true) return val1 == null ? false : (Boolean)val1;}
    throw new Error("Missing return statement in function");
  }

  final public Object value_exp() throws ParseException {
                      Object rt; Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
      jj_consume_token(TRUE);
                {if (true) return true;}
      break;
    case FALSE:
      jj_consume_token(FALSE);
                 {if (true) return false;}
      break;
    case NULL:
      jj_consume_token(NULL);
                 {if (true) return null;}
      break;
    case VAR:
      t = jj_consume_token(VAR);
                try {
                                {if (true) return typePool.resolvePropertityValue(target, t.image);}
                        } catch (Throwable e) {
                                {if (true) return null;}
                        }
      break;
    case NUMBER:
      t = jj_consume_token(NUMBER);
                       {if (true) return Integer.parseInt(t.image);}
      break;
    case STRING:
      t = jj_consume_token(STRING);
                       {if (true) return t.image.substring(1, t.image.length()-1);}
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public SimpleExpressionInterpreterTokenManager token_source;
  JavaCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[6];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x80,0x40,0x20,0x300,0x300,0x27c000,};
   }

  /** Constructor with InputStream. */
  public SimpleExpressionInterpreter(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public SimpleExpressionInterpreter(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new SimpleExpressionInterpreterTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public SimpleExpressionInterpreter(java.io.Reader stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new SimpleExpressionInterpreterTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public SimpleExpressionInterpreter(SimpleExpressionInterpreterTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(SimpleExpressionInterpreterTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[24];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 6; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 24; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
