/*******************************************************************************
 * Copyright (c) 2008-2009 zhang yuexiang.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ 
options {
  JDK_VERSION = "1.5";
  JAVA_UNICODE_ESCAPE = true;
  STATIC = false;
}
PARSER_BEGIN(SimpleExpressionInterpreter)
/*******************************************************************************
 * Copyright (c) 2008-2009 zhang yuexiang.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ 
package org.xfeep.asura.core.el;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.StringReader;
import java.util.HashMap;
import java.util.Map;
import org.xfeep.asura.core.reflect.TypeInfoPool;


public class SimpleExpressionInterpreter {

  private Object target;
  TypeInfoPool typePool = TypeInfoPool.getDefault();
  
/*  
  public SimpleExpressionInterpreter(){
  	typePool =  TypeInfoPool.getDefault();
  }
  
  public SimpleExpressionInterpreter(TypeInfoPool typePool){
  	this.typePool = typePool;
  }
*/
  
  public void setTarget(Object target){
  	this.target = target;
  }
  
  public Object getTarget(){
  	return target;
  }
  
   public static void main(String args[]) throws ParseException {
    
    Map<String, Object> target = new HashMap<String, Object>();
    target.put("name", "zhangyx");
    Map<String, Object> config = new HashMap<String, Object>();
    config.put("_id_", "http");
    target.put("c", config);
    BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
    String line = null;
    
    try {
		while (  (line = reader.readLine()) != null ) {
			SimpleExpressionInterpreter interpreter = new SimpleExpressionInterpreter(new StringReader(line));
			interpreter.setTarget(target);
		  try {
		    System.out.println(interpreter.eval());
		  } catch (Throwable e) {
		   e.printStackTrace();
		    interpreter.ReInit(System.in);
		  }
		}
	} catch (IOException e) {
		e.printStackTrace(); 
	}
  }
}
PARSER_END(SimpleExpressionInterpreter)

SKIP :
{
 	" "
|	"\r"
|	"\t"
|	"\n"
}
TOKEN : /* OPERATORS */
{
	< NOT: "!" >
|	< AND: "&" >
|	< OR: "|" >
|	< EQ: "=" >
|   < NEQ: "!=" >
|	< GT: ">" >
|	< LT: "<" >
|	< NLT: ">=" >
|	< NGT: "<=" >
|   < TRUE: "true">
|	< FALSE: "false">
|	< NULL : "null">
}

TOKEN : /*CONSTANT*/
{
	<NUMBER : (<DIGIT>)+>
	|<STRING: ( "\'" ( <INNERSTR> )* "\'") | ( "\"" ( <INNERSTR> )* "\"") >
	|< #DIGIT: ["0" - "9"] >
	| <#INNERSTR: (~["\'","\\","\n","\r"])
			        | ("\\"
			            ( ["n","t","b","r","f","\\","'","\""]
			            | ["0"-"7"] ( ["0"-"7"] )?
			            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
			            )
			          )
	   >
}

TOKEN : /* VAR */
{
   <VAR:  <SVAR>( "." <SVAR> )* >
   |<#SVAR: ( <LETTER> )( <LETTER> | ["0"-"9"])*>
   |<#LETTER:
      [
       "\u0024",
       "\u0041"-"\u005a",
       "\u005f",
       "\u0061"-"\u007a",
       "\u00c0"-"\u00d6",
       "\u00d8"-"\u00f6",
       "\u00f8"-"\u00ff",
       "\u0100"-"\u1fff",
       "\u3040"-"\u318f",
       "\u3300"-"\u337f",
       "\u3400"-"\u3d2d",
       "\u4e00"-"\u9fff",
       "\uf900"-"\ufaff"
      ]> 
}

boolean eval() : {boolean rt; }
{
	rt = boolean_filter()  <EOF> {return rt;}
}

boolean boolean_filter()  : {boolean rt;}
{
	 rt = boolean_term() {if (rt) return rt; }
	  ( <OR> rt = boolean_term() {if (rt) return rt;} ) * { return false;}
}
	 
boolean boolean_term()  : {boolean rt; }
{
	 rt = boolean_factor() {if (!rt) return false; } ( <AND> rt = boolean_factor() {if (!rt) return false; })* {return true;}
}
	 
boolean boolean_factor()  : {boolean rt; boolean isNot = false; }
{ 
	 (<NOT> {isNot=true;})? rt = boolean_primary() { return isNot ? !rt : rt; }
}

boolean boolean_primary():{boolean isEq = false; boolean rt; Object val1; Object val2;}
{
	val1 = value_exp() 
	( (  <EQ> {isEq=true;} | <NEQ> )  
	 val2 = value_exp() 
	 { 
	 	 rt = SimpleComparator.compareEquals(val1, val2);
	 	 return isEq ? rt : !rt;
	  } 
	) ?
	{
		return val1 == null ? false : (Boolean)val1;
	}
}


Object value_exp() : {Object rt; Token t;}
{
	<TRUE> {return true;}
	|<FALSE>{return false;}
	|<NULL> {return null;}
	| t = <VAR> {
		try {
				return typePool.resolvePropertityValue(target, t.image);
			} catch (Throwable e) {
				return null;
			} 
	}
	| t = <NUMBER>{return Integer.parseInt(t.image);}
	| t = <STRING>{return t.image.substring(1, t.image.length()-1);}
}

