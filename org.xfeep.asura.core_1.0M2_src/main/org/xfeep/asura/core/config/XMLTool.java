package org.xfeep.asura.core.config;//import java.io.*;import java.io.StringWriter;import javax.xml.parsers.DocumentBuilderFactory;import javax.xml.parsers.DocumentBuilder;//import javax.xml.parsers.ParserConfigurationException;import org.w3c.dom.*;import javax.xml.transform.*;import javax.xml.transform.stream.*;import javax.xml.transform.dom.*;/** * this class will be deleted in 1.0 M3 * This class contains various tools to deal with XML documents * @author zhang yuexiang * */@Deprecatedpublic class XMLTool {	public static boolean debug = false;	/**	 * Creates a new Document	 */	public static Document createDocumentRoot() {		try {			DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();			dbf.setNamespaceAware(true);			DocumentBuilder db = dbf.newDocumentBuilder();			Document doc = db.newDocument();			return doc;		} catch (Exception e) {			System.out.println(e);			return null;		}	}	/**	 * Coverts a DOM to an output stream	 */	public static void Dom2Stream(org.w3c.dom.Document doc,			java.io.Writer writer) {		if (doc == null)			System.out.println("doc is null");		else			System.out.println(doc);		if (writer == null)			System.out.println("writer is null");		try {			TransformerFactory tFactory = TransformerFactory.newInstance();			// Use the TransformerFactory to instantiate a Transformer that will			// work with			// the stylesheet you specify. This method call also processes the			// stylesheet			// into a compiled Templates object.			Transformer transformer = tFactory.newTransformer();			// Use the Transformer to apply the associated Templates object to			// an XML document			// (foo.xml) and write the output to a file (foo.out).			transformer.transform(new DOMSource(doc), new StreamResult(writer));		} catch (Exception e) {			try {				writer.write(output(doc));				e.printStackTrace();			} catch (Exception ex) {				System.out.println(e);			}		}	}	/**	 * ��XML�ĵ���һ��Node������л�Ϊ�ַ�����XML�ĵ���Ƭ�Ρ�	 * 	 * @param node	 *            Ҫ���л���Node	 * @param includingDeclaration	 *            ����ַ���Ҫ��Ҫ��"&lt;?xml version="1.0"	 *            encoding="UTF-8"?&gt;"������ĵ����� true,�����ܰ�false��һ������	 * @param includingThisNodeTag	 *            ����ַ���Ҫ��Ҫ��ý�㱾���Ԫ�ر�ǩ�������XMLƬ���еĶ���Ԫ�ر�ǩ���磬�����ΪnodeName��	 *            Ԫ�ر�ǩ����Ϊ&lt;ns:nodeName	 *            xmlns:ns="http://..."&gt;&lt;/ns:nodeName&gt;��true����false������	 * @return ���л���Ľ��XML�ĵ���Ƭ�ε��ַ���ʽ	 */public static String Node2String(org.w3c.dom.Node node,			boolean includingDeclaration, boolean includingThisNodeTag) {		if (includingDeclaration && includingThisNodeTag) {			if (node == null)				return null;			else if (debug)				System.out.println(node);			String s = null;			StringWriter writer = new StringWriter();									if (writer == null)				if (debug)					System.out.println("writer is null");			try {				TransformerFactory tFactory = TransformerFactory.newInstance();				// Use the TransformerFactory to instantiate a Transformer that				// will				// work with				// the stylesheet you specify. This method call also processes				// the				// stylesheet				// into a compiled Templates object.				Transformer transformer = tFactory.newTransformer();				// Use the Transformer to apply the associated Templates object				// to				// an XML document				// (foo.xml) and write the output to a file (foo.out).				transformer.transform(new DOMSource(node), new StreamResult(						writer));				s = writer.toString();			} catch (Exception e) {				e.printStackTrace();			}			return s;		}		else if (includingDeclaration && !includingThisNodeTag) {			if (node == null)				return null;			StringBuffer sb = new StringBuffer();			String str = Node2String(node, true, true);			if(str==null)				str="";			if (str.startsWith("<?")) {				int index = str.indexOf("?>", 0);				if (index > -1) {					try {						str = str.substring(0,index+2);					} catch (IndexOutOfBoundsException e) {						e.printStackTrace();					}				}			}			if(str!=null && str.length()!=0)				sb.append(str);			String s=Node2String(node,false,false);			if(s!=null && s.length()!=0)				sb.append(s);			return sb.toString();		}		else if (!includingDeclaration && includingThisNodeTag) {			if (node == null)				return null;			String str = Node2String(node, true, true);			if(str==null)				return null;			if (str.startsWith("<?")) {				int index = str.indexOf("?>", 0);				if (index > -1) {					try {						str = str.substring(index + 2);					} catch (IndexOutOfBoundsException e) {						e.printStackTrace();					}				}			}			return str;		}		else  //(!includingDeclaration && !includingThisNodeTag) 		{			if (node == null)				return null;						StringBuffer sb = new StringBuffer();										NodeList nl = node.getChildNodes();			for (int i = 0; i < nl.getLength(); i++) {				Node child = (Node) nl.item(i);				if(child!=null){					String s = Node2String(child,false,true);					if (s != null && s.length() != 0) {						sb.append(s);					}				}			}			return sb.toString();		}	}	public static String Dom2String(org.w3c.dom.Document doc) {		String s = null;		StringWriter writer = new StringWriter();		if (doc == null)			System.out.println("doc is null");		else			System.out.println(doc);		if (writer == null)			System.out.println("writer is null");		try {			TransformerFactory tFactory = TransformerFactory.newInstance();			// Use the TransformerFactory to instantiate a Transformer that will			// work with			// the stylesheet you specify. This method call also processes the			// stylesheet			// into a compiled Templates object.			Transformer transformer = tFactory.newTransformer();			// Use the Transformer to apply the associated Templates object to			// an XML document			// (foo.xml) and write the output to a file (foo.out).			transformer.transform(new DOMSource(doc), new StreamResult(writer));			s = writer.toString();		} catch (Exception e) {			e.printStackTrace();		}		return s;	}	/**	 * Print the document out.	 */	public static String output(Document doc) {		String out;		out = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>";		out += showElement(doc.getDocumentElement());		return out;	}	/**	 * Display one element	 */	public static String showElement(Element e) {		String out;		out = "<" + e.getNodeName() + " ";		NamedNodeMap map = e.getAttributes();		for (int i = 0; i < map.getLength(); i++)			out += map.item(i).getNodeName() + "=\""					+ map.item(i).getNodeValue() + "\" ";		out += ">\n";		NodeList nl = e.getChildNodes();		for (int i = 0; i < nl.getLength(); i++) {			if (nl.item(i).getNodeType() == Node.ELEMENT_NODE)				out += showElement((Element) nl.item(i));			else if (nl.item(i).getNodeType() == Node.TEXT_NODE) {				//  System.out.println(nl.item(i).getNodeValue());				out += nl.item(i).getNodeValue();			} else				System.out.println("other node");		}		out = out + "</" + e.getNodeName() + ">";		return out;	}}